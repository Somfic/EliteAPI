name: release
on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  release:
    concurrency:
      group: ${{ github.workflow }}
    name: release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Apply Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules/
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}

      - name: Install dependencies
        run: bun install
          
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy, llvm-tools-preview
    
      - name: Apply Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}

      - name: Set up Rust tools
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install Rust dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.1 libayatana-appindicator3-dev librsvg2-dev
          
      - name: Install windows-compilation dependencies
        run: |
          sudo apt install nsis
          sudo apt install lld llvm
          rustup target add x86_64-pc-windows-msvc
          cargo install --locked cargo-xwin

      # - name: install macos intel target
      #   if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
      #   run: rustup target add x86_64-apple-darwin

      - name: Install committer
        run: cargo install --locked committer || true

      - name: Tag version
        run: |
          committer tag
          echo "COMMITTER_IS_NEW=$(cat .env/COMMITTER_IS_NEW)" >> $GITHUB_ENV
          echo "COMMITTER_TAG=$(cat .env/COMMITTER_TAG)" >> $GITHUB_ENV

      - name: Push tag to origin
        if: env.COMMITTER_IS_NEW == 'true'
        run: git push --tags origin

      - name: Update Cargo.toml version
        if: env.COMMITTER_IS_NEW == 'true'
        run: |
          echo "updating Cargo.toml version to $COMMITTER_TAG"
          sed -i 's/^\s*version = ".*"/version = "'"$COMMITTER_TAG"'"/' src-tauri/Cargo.toml

      - name: Create release
        if: env.COMMITTER_IS_NEW == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: target/release/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.COMMITTER_TAG }}
          body_path: ".env/COMMITTER_CHANGELOG"
          draft: true

      - name: Build app
        uses: tauri-apps/tauri-action@v0
        if: env.COMMITTER_IS_NEW == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ env.COMMITTER_TAG }}
          releaseDraft: true
          prerelease: false
          appVersion: ${{ env.COMMITTER_TAG }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          args: --runner cargo-xwin --target x86_64-pc-windows-msvc
